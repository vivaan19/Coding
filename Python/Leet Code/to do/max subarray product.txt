152. Maximum Product Subarray
Medium 

Given an integer array nums, find a contiguous non-empty subarray within the array that has the largest product, and return the product.

It is guaranteed that the answer will fit in a 32-bit integer.

A subarray is a contiguous subsequence of the array.

 

Example 1:

Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.
Example 2:

Input: nums = [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.
 
Example 3: 

Input
[-2,3,-4]
Output
3
Expected
24

Constraints:

1 <= nums.length <= 2 * 104
-10 <= nums[i] <= 10
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

----------------------------------

Code but has logic issues. 

class Solution:
    def maxProduct(self, nums: List[int]) -> int:
        mul=0
        if len(nums) == 2:
            if 0 in nums:
                return max(nums)
            else:
                return nums[0]*nums[1]
        elif len(nums) == 1:
            return nums[0]
        elif len(nums) == 0:
            return 0
        else:
            for i in range(len(nums)-1):
                if nums[i]*nums[i+1] > mul:
                    mul = nums[i]*nums[i+1]
                if mul < max(nums):
                    return max(nums)
                else:
                    return mul